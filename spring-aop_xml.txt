Spring-aop
    1.aop的概念
        面向切面编程,是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术
        aop是oop(面向对象编程)的延续
        利用aop可以对业务逻辑的各个部分进行隔离,从而使得业务逻辑个部分之间的耦合度降低,提高程序的可重用性,同时提升开发效率
    2.aop的作用及其优势
        作用:
            在程序运行期间,在不修改源码的情况下对方法进行功能增强
        优势:
            减少重复代码提高开发效率,并且便于维护
    3.aop的底层实现
        aop底层是通过spring提供的动态代理技术实现的
        在运行期间
            spring通过动态代理技术动态生成代理对象
            代理对象方法执行时进行增强功能的介入
            最后去调用目标对象的方法,从而完成功能的增强
    4.aop的动态代理技术
        JDK代理:基于接口的动态代理技术
        cglib代理:基于父类的动态代理技术
            *不需要会写但是需要理解
    5.JDK的动态代理 详见com.com.qyj.proxy.jdk
    6.cglib的动态代理 详见com.com.qyj.proxy.cglib
        *现在已经集成了cglib的第三方库
    7.aop的相关概念
        Target(目标对象):代理的目标对象
        Proxy(代理):一个类被AOP织入增强后,就昌盛一个结果代理类
        Joinpoint(连接点):指被拦截到的点,在spring中,这些点指的是方法,因为spring只支持方法类型的连接点
        *Pointcut(切入点):指需要对哪些Joinpoint进行拦截
            *连接点:可以被增强的方法
            *切入点:被增强的方法
        *Advice(通知/增强):拦截到Joinpoint之后所要做的事情
            *通知:具体的增强
        *Aspect(切面):切入点和通知(引介)的结合
            *切面:切点+通知
        *Weaving(织入):指把增强应用到目标对象来创建新的代理对象的过程.spring采用动态代理织入,而AspectJ采用编译器织入和类装载期织入
            *织入:将切点和通知结合成生成代理对象
    8.aop开发明确的事项
        1.需要编写的内容
            1.编写业务核心代码(目标类的目标方法)
            2.编写切面类,切面类中有通知(增强功能方法)
            3.在配置文件中,配置织入关系,即将哪些通知与哪些连接点进行结合
        2.aop技术实现的内容
            spring框架监控切入点方法的执行.
            1.监控到切入点方法被运行
            2.动态创建目标对象的代理对象
            3.根据通知类别,在代理对象的对应位置,将通知对应的功能织入
            4.完成代码运行
        3.aop底层使用那种代理方式
            spring中,框架会根据目标类是否实现了接口来决定采用那种动态代理的方式
xml实现
    1.快速入门 详见com.com.qyj.aop
        1.导入aop坐标
            <dependency>
              <groupId>org.aspectj</groupId>
              <artifactId>aspectjweaver</artifactId>
              <version>1.8.4</version>
            </dependency>
        2.创建目标接口和目标类
            public interface TargetInterface {
                public void save();
            }
            public class Target implements TargetInterface {
                @Override
                public void save() {
                    System.out.println("save running...");
                }
            }
        3.创建切面类
            public class MyAspect {
                public void before(){
                    System.out.println("前置增强");
                }
            }
        4.将目标类和切面类的对象创建全交给spring
            <bean id="target" class="com.com.qyj.aop.Target"></bean>
            <bean id="myAspect" class="com.com.qyj.aop.MyAspect"></bean>
        5.在applicationContext中配置织入关系
            xmlns:aop="http://www.springframework.org/schema/aop"
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
            <bean:config>
                <aop:aspect ref="myAspect">
                    <aop:before method="before" pointcut="execution(public void com.qyj.aop.Target.save())"></aop:before>
                </aop:aspect>
            </bean:config>
                *将aspect的before()以before形式织入到target的save()上
        6.测试代码
    2.xml配置aop详解
        1.切点表达式写法
            pointcut="execution([修饰符] 返回值 包名.类名.方法名(参数))"
                *修饰符可以省略
                *返回值类型,包名,类名,方法名可以使用*号代表任意
                *包名与类名之间的点. 代表当前包下的类,两个点.. 表当前包及其子包下的类
                *参数列表可以使用两个点.. 表示任意个数,任意类型的参数
        2.通知的类型
            <aop:before>            前置通知        切入点方法执行之前
            <aop:after-returning>   后置通知        切入点方法执行之后
            <aop:around>            环绕通知        切入点方法执行前后
            <aop:throwing>          异常抛出通知     切入点异常
            <aop:after>             最终通知        切入点无论是否异常
            1.运行正常时
                *前置,后置增强与环绕增强似乎没有固定先后关系???
                    前置增强
                    环绕前增强
                    save running...
                    最终增强
                    环绕后增强
                    后置增强
            2.切点异常出现时
                执行异常增强
                环绕后增强与后置增强不执行
                最终增强始终执行
                    前置增强
                    环绕前增强
                    save running...
                    最终增强
                    异常增强
        3.切点表达式的抽取 -> 标准格式
            <!--目标对象-->
            <bean id="target" class="com.qyj.aop.Target"></bean>

            <!--切面对象-->
            <bean id="myAspect" class="com.qyj.aop.MyAspect"></bean>

            <!--织入关系:告诉spring哪些方法(切点)需要进行哪些增强(前置,后置...)-->
            <bean:config>
                <!--声明切面-->
                <aop:pointcut id="targetPointcut" expression="execution(public void com.qyj.aop.Target.save())"/>
                <aop:aspect ref="myAspect">
                    <aop:around method="around" pointcut-ref="targetPointcut"/>
                    <aop:before method="before" pointcut-ref="targetPointcut"/>
                    <aop:after-returning method="afterReturning" pointcut-ref="targetPointcut"/>
                    <aop:after-throwing method="afterThrowing" pointcut-ref="targetPointcut"/>
                    <aop:after method="after" pointcut-ref="targetPointcut"/>
                </aop:aspect>
            </bean:config>












